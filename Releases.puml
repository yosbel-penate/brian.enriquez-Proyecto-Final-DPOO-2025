// Diagramas de clases(puede estar sujeto a cambios)
// ¡¡ATENCIÓN!! lo que se subirá hoy es una optimización y otganización del codigo original
//ya que logramos acercarnos bastante a la visión definitiva que tenemos por ahora del proyecto,
//aunque esta puede cambiar durante el desarrollo, no se preveen grandes cambios

@startuml
class Game {
    - ElementList: string[]
    - GameStatus: string
    + Game(CharacterList: string[], GameStatus: string)
    + getGameStatus(): string
    + setGameStatus(GameStatus: string): void
    + getElementList(): string[]
    + StatusCalculation(GameStatus: string): string
    + PlayingCharacterList(): string[]
    + EnemyTurn(CharacterList: string[])
    + Turn(CharacterList: string[])
}

class Map {
    - Row_size: int
    - Column_size: int
    + Map()
    + Map(Row_size: int, Column_size: int)
}

class Position {
    - Row: int
    - Column: int
    + Position()
    + Position(Row: int, Column: int)
    + getRow(): int
    + setRow(Row: int): void
    + getColumn(): int
    + setColumn(Column: int): void
}

 abstract class  Element { 
    # name: String
    # position: Position
    + Element()
    + Element(name: String, position: Position)
    + getPosition(): Position
    + getName(): string
}

class Bonus extends Element{
    # BonusDescription: String
    + Bonus()
    + Bonus(BonusDescription: String, Position: Element, name: Element)
    + getBonusDescription(): String
    + setBonusDescription(BonusDescription: String): void
    + Repeat action(): void
    + addHP(): void
    + Increase damage(): void
    + Increase movement rank(): void
    + Increase skill power(): void
}

class DeadlyDrougth extends Bonus{
    +DeadlyDrougth()
    +DeadlyDrougth(BonusDescription: String, Position: Element, name: Element, Health points: Character)
    +DecreaseHp(Health points: Character): void
}

class PurifiedWater  extends Bonus{
     +PurifiedWater()
     +PurifiedWater(BonusDescription: String, Position: Element, name: Element, Health points: Character)
     +IncreaseHp(Health points: Character): void
}

class Fertilizer extends Bonus{
     +Fertilizer()
     +Fertilizer(BonusDescription: String, Position: Element, name: Element, damage: Character)
     +IncreaseDamage(damage: Character): void
}

class InfestedSoil extends Bonus{
     +InfestedSoil()
     +InfestedSoil(BonusDescription: String, Position: Element, name: Element, damage: Character)
     +DecreaseDamage(damage: Character): void
}

class Puzzle extends Element{
    - Question: String
    - Question Description: String
    + Puzzle()
    + Puzzle(parameter, Question: String, Question Description: String, String, Name: Element, Position: Element)
    + getQuestion(): String
    + setQuestion(Question: String): void
    + getQuestionDescription(): String
    + setQuestionDescription(Question Description: String): void
    + Make Question(Question: String, Question Description: String): boolean
}

class Obstacle extends Element{
    + OccupatePosition(): boolean
}

 abstract class  Character extends Elements implements Action {
    # Health points: int
    # damage: int
    # resistance: int
    # Action Rank: int
    # damageS: int
    # damageC: float
    # Name: String
    # Action RankS: int
    # Move Rank: int
    + Character(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + getHealthPoints(): int
    + setHealthPoints(Health points: int): void
    + getDamage(): int
    + setDamage(damage: int): void
    + getResistance(): int
    + setResistance(resistance: int): void
    + getActionRank(): int
    + setActionRank(Action Rank: int): void
    + getDamageS(): int
    + setDamageS(damageS: int): void
    + getDamageC(): float
    + setDamageC(damageC: float): void
    + getName(): String
    + setName(Name: String): void
    + getActionRankS(): int
    + setActionRankS(Action RankS: int): void
    + getMoveRank(): int
    + setMoveRank(Move Rank: int): void
}

abstract class  Hero extends Character {
    + Hero()
    + Hero(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)  
}

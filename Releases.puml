// Diagramas de clases(puede estar sujeto a cambios)
// ¡¡ATENCIÓN!! lo que se subirá hoy es una optimización y otganización del codigo original
//ya que logramos acercarnos bastante a la visión definitiva que tenemos por ahora del proyecto,
//aunque esta puede cambiar durante el desarrollo, no se preveen grandes cambios

@startuml
class Game {
    - ElementList: string[]
    - GameStatus: string
    + Game(CharacterList: string[], GameStatus: string)
    + getGameStatus(): string
    + setGameStatus(GameStatus: string): void
    + getElementList(): string[]
    + StatusCalculation(GameStatus: string): string
    + PlayingCharacterList(): string[]
    + EnemyTurn(CharacterList: string[])
    + Turn(CharacterList: string[])
}

class Map {
    - Row_size: int
    - Column_size: int
    + Map()
    + Map(Row_size: int, Column_size: int)
}

class Position {
    - Row: int
    - Column: int
    + Position()
    + Position(Row: int, Column: int)
    + getRow(): int
    + setRow(Row: int): void
    + getColumn(): int
    + setColumn(Column: int): void
}

 abstract class  Element { 
    # name: String
    # position: Position
    + Element()
    + Element(name: String, position: Position)
    + getPosition(): Position
    + getName(): string
}

class Bonus extends Element{
    # BonusDescription: String
    + Repeat action(): void
    + addHP(): void
    + Increase damage(): void
    + Increase movement rank(): void
    + Increase skill power(): void
}

class DeadlyDrougth extends Bonus{
    +DecreaseHp(Health points: Character): void
}

class PurifiedWater extends Bonus{
     +IncreaseHp(Health points: Character): void
}

class Fertilizer extends Bonus{
     +IncreaseDamage(damage: Character): void
}

class InfestedSoil extends Bonus{
     +DecreaseDamage(damage: Character): void
}

class Puzzle extends Element{
    - Question: String
    - Question Description: String
    + Puzzle()
    + Puzzle(parameter, Question: String, Question Description: String, String, Name: Element, Position: Element)
    + getQuestion(): String
    + setQuestion(Question: String): void
    + getQuestionDescription(): String
    + setQuestionDescription(Question Description: String): void
    + Make Question(Question: String, Question Description: String): boolean
}

class Obstacle extends Element{
    + OccupatePosition(): boolean
}

 abstract class  Character extends Elements implements Action {
    # Health points: int
    # damage: int
    # resistance: int
    # Action Rank: int
    # damageS: int
    # damageC: float
    # Name: String
    # Action RankS: int
    # Move Rank: int
    + Character(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + getHealthPoints(): int
    + setHealthPoints(Health points: int): void
    + getDamage(): int
    + setDamage(damage: int): void
    + getResistance(): int
    + setResistance(resistance: int): void
    + getActionRank(): int
    + setActionRank(Action Rank: int): void
    + getDamageS(): int
    + setDamageS(damageS: int): void
    + getDamageC(): float
    + setDamageC(damageC: float): void
    + getName(): String
    + setName(Name: String): void
    + getActionRankS(): int
    + setActionRankS(Action RankS: int): void
    + getMoveRank(): int
    + setMoveRank(Move Rank: int): void
}
abstract class  Hero extends Character {
    + Hero()
    + Hero(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)  
}
class LanceLettuce extends Hero {
    + LanceLettuce()
    + LanceLettuce(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + pushEnemies(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class CarrotShooter extends Hero{
    + CarrotShooter()
    + CarrotShooter(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)                                                     
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
    + shootCarrotArrows(): void

}
class BomberTomato extends Hero{
    - selfDamage: int
    + BomberTomato()
    + BomberTomato(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
    + acidExplosion(): void

}
class CucumberShadow extends Hero{
    + CucumberShadow()
    + CucumberShadow(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + moveStealthily(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
    + moveStealthily(): void

}
class BroccoliSage extends Hero{
    + BroccoliSage()
    + BroccoliSage(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + healAllies(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class PumpkinShield extends Hero{
    - DamageAbsortion:int
    + PumpkinShield()
    + PumpkinShield(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + ShieldDefense(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class BerserkSpinach extends Hero{
    - AugmentDamage: int
    + BerserkSpinach()
    + BerserkSpinach(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + FrenzyHit(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class RadishSprinter extends Hero{
    - MoveDouble: int
    + RadishSprinter()
    + RadishSprinter(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + MoveFast(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class GarlickWarlock extends Hero{
    - poisoning: int
    + GarlickWarlock()
    + GarlickWarlock(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + PoisonousGas(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class CornSniper extends Hero{
    - CriticalAttack: int
    + CornSniper()
    + LanceLettuce(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + GrainShot(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
abstract class Enemy extends Character {
    + Enemy()
    + Enemy(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
}
class MutantLettuce extends Enemy{
    - healthRegeneration: int
    + MutantLettuce()
    + MutantLettuce(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + regenerateHealth(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class GiantSlug extends Enemy{
    + GigantSlug()
    + GigantSlug(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + slowCharacters(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class KillerBee extends Enemy{
    - poisonDamage: int
    + KillerBee()
    + KillerBee(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + applyPoison(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class MoleDigger extends Enemy{
    + MoleDigger()
    + MoleDigger(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + dig(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class ToxicMushroom extends Enemy{
    + ToxicMushroom()
    + ToxicMushroom(Health points: int, damage: int, resistance: int, Action Rank: int, damageS: int, damageC: float, Name: String, Action RankS: int, Move Rank: int)
    + explodeOnDeath(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}


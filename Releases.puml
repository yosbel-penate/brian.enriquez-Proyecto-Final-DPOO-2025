// Diagramas de clases(puede estar sujeto a cambios)
// ¡¡ATENCIÓN!! lo que se subirá hoy es una optimización y otganización del codigo original
//ya que logramos acercarnos bastante a la visión definitiva que tenemos por ahora del proyecto,
//aunque esta puede cambiar durante el desarrollo, no se preveen grandes cambios

@startuml
skinparam linetype ortho
class Game {
    - ElementList: string[]
    - GameStatus: string
    + StatusCalculation(GameStatus: string): string
    + PlayingCharacterList(): string[]
    + EnemyTurn(CharacterList: string[])
    + Turn(CharacterList: string[])
}

class Map {
    - Row_size: int
    - Column_size: int
    + Map()
    + Map(Row_size: int, Column_size: int)
}

class Position {
    - Row: int
    - Column: int
  
}

 abstract class  Element { 
    # name: String
    # position: Position
    # symbol: char 
    # description: String
    # visibility: boolean
    # id: String
}

class Bonus extends Element{
    # BonusDescription: String
}

class DeadlyDrougth extends Bonus{
    +DecreaseHp(Health points: Character): void
}

class PurifiedWater extends Bonus{
     +IncreaseHp(Health points: Character): void
}

class Fertilizer extends Bonus{
     +IncreaseDamage(damage: Character): void
}

class InfestedSoil extends Bonus{
     +DecreaseDamage(damage: Character): void
}

class Puzzle extends Element{
    - Question: String
    - Question Description: String
    + setQuestionDescription(Question Description: String): void
    + Make Question(Question: String, Question Description: String): boolean
}

class Obstacle extends Element{
    + OccupatePosition(): boolean
}

 abstract class  Character extends Elements {
    # Health points: int
    # damage: int
    # resistance: int
    # Action Rank: int
    # damageS: int
    # damageC: float
    # Name: String
    # Action RankS: int
    # Move Rank: int
}
abstract class  Hero extends Character {
    + attacking(Action Rank: Character): Character
    + moving(Move Rank: Character): Character
    + activating Skill(Action RankS: Character): Character  
}
class LanceLettuce extends Hero {
    + pushEnemies(): void
}
class CarrotShooter extends Hero {
    + shootCarrotArrows(): void
}
class BomberTomato extends Hero {
    - selfDamage: int
    + acidExplosion(): void
}
class CucumberShadow extends Hero {
    + moveStealthily(): void
}
class BroccoliSage extends Hero {
    + healAllies(): void
}
class PumpkinShield extends Hero {
    - DamageAbsortion:int
    + ShieldDefense(): void
}
class BerserkSpinach extends Hero {
    - AugmentDamage: int
    + FrenzyHit(): void
}
class RadishSprinter extends Hero{
    - MoveDouble: int
    + MoveFast(): void
}
class GarlickWarlock extends Hero{
    - poisoning: int
    + PoisonousGas(): void
}
class CornSniper extends Hero{
    - CriticalAttack: int
    + GrainShot(): void
}
abstract class Enemy extends Character {
    + attacking(Action Rank: Character): Character
    + moving(Move Rank: Character): Character
    + activating Skill(Action RankS: Character): Character
}
class MutantLettuce extends Enemy{
    - healthRegeneration: int 
    +regenerateHealth(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class GiantSlug extends Enemy{
    + slowCharacters(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class KillerBee extends Enemy{
    - poisonDamage: int
    + applyPoison(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class MoleDigger extends Enemy{
    + dig(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
class ToxicMushroom extends Enemy{
    + explodeOnDeath(): void
    + Attacking(Action Rank: Character): Character
    + Moving(Move Rank: Character): Character
    + Activating Skill(Action RankS: Character): Character
}
Game *-- "1...1"Map : Contains
Position *--"1...1" Element : Uses
Game *--"6...*"  Element : Uses


// Diagramas de clases(puede estar sujeto a cambios)
// ¡¡ATENCIÓN!! lo que se subirá hoy es una optimización y otganización del codigo original
//ya que logramos acercarnos bastante a la visión definitiva que tenemos por ahora del proyecto,
//aunque esta puede cambiar durante el desarrollo, no se preveen grandes cambios

@startuml
class Game {
    - ElementList: string[]
    - GameStatus: string
    + Game(CharacterList: string[], GameStatus: string)
    + getGameStatus(): string
    + setGameStatus(GameStatus: string): void
    + getElementList(): string[]
    + StatusCalculation(GameStatus: string): string
    + PlayingCharacterList(): string[]
    + EnemyTurn(CharacterList: string[])
    + Turn(CharacterList: string[])
}

class Map {
    - Row_size: int
    - Column_size: int
    + Map()
    + Map(Row_size: int, Column_size: int)
}

class Position {
    - Row: int
    - Column: int
    + Position()
    + Position(Row: int, Column: int)
    + getRow(): int
    + setRow(Row: int): void
    + getColumn(): int
    + setColumn(Column: int): void
}

 abstract class  Element { 
    # name: String
    # position: Position
    + Element()
    + Element(name: String, position: Position)
    + getPosition(): Position
    + getName(): string
}

class Bonus extends Element{
    # BonusDescription: String
    + Bonus()
    + Bonus(BonusDescription: String, Position: Element, name: Element)
    + getBonusDescription(): String
    + setBonusDescription(BonusDescription: String): void
    + Repeat action(): void
    + addHP(): void
    + Increase damage(): void
    + Increase movement rank(): void
    + Increase skill power(): void
}

class DeadlyDrougth extends Bonus{
    +DeadlyDrougth()
    +DeadlyDrougth(BonusDescription: String, Position: Element, name: Element, Health points: Character)
    +DecreaseHp(Health points: Character): void
}

class PurifiedWater  extends Bonus{
     +PurifiedWater()
     +PurifiedWater(BonusDescription: String, Position: Element, name: Element, Health points: Character)
     +IncreaseHp(Health points: Character): void
}

class Fertilizer extends Bonus{
     +Fertilizer()
     +Fertilizer(BonusDescription: String, Position: Element, name: Element, damage: Character)
     +IncreaseDamage(damage: Character): void
}

class InfestedSoil extends Bonus{
     +InfestedSoil()
     +InfestedSoil(BonusDescription: String, Position: Element, name: Element, damage: Character)
     +DecreaseDamage(damage: Character): void

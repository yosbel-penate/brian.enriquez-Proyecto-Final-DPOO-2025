package gui;

import javax.swing.*;

import exception.EmptyListException;
import gui.components.GamePanel;
import gui.components.InfoPanel;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class GameScreen extends JFrame {
    private boolean running = true;
    private GamePanel gamePanel;
    private InfoPanel infoPanel;
    
    public GameScreen() {
        setTitle("Lechugas del Caos: El Jardín de los Enigmas");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // Configurar pantalla completa
        setUndecorated(true);
        GraphicsEnvironment.getLocalGraphicsEnvironment()
            .getDefaultScreenDevice()
            .setFullScreenWindow(this);
        
        // Crear los paneles
        gamePanel = new GamePanel();
        infoPanel = new InfoPanel();
        
        // Configurar JSplitPane para dividir la pantalla
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, gamePanel, infoPanel);
        splitPane.setDividerSize(5); // Grosor del divisor
        splitPane.setResizeWeight(11.0/12.0); // Proporción 11/12 para el primer panel
        
        // Deshabilitar el redimensionamiento manual
        splitPane.setEnabled(false);
        
        add(splitPane);
        
        // Control del juego
        addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {}
            
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    running = false;
                    dispose();
                }
                // Aquí puedes añadir más controles
            }
            
            @Override
            public void keyReleased(KeyEvent e) {}
        });
    }
    
    public void startGame() {
        setVisible(true);
        
        // Bucle principal del juego
        new Thread(() -> {
            while (running) {
                try {
                    Thread.sleep(16); // ~60 FPS
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                
                // Actualizar lógica del juego
                gamePanel.repaint();
                try {
					infoPanel.updateInfo();
					infoPanel.repaint();
				} catch (IndexOutOfBoundsException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (EmptyListException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} // Actualizar información
                
            }
        }).start();
    }
}
